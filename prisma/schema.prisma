datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String? 
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  instagram     String?
  twitter       String?
  github        String?
  website       String?
  location      String?
  createdAt     DateTime @default(now())

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model Post {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  imageUrl String
  userId    String @db.ObjectId
  content   String @db.String
  description String  @db.String
  slug      String @db.String
  tags      String[]
  readCounter   String[]
  likes     String[]  @db.ObjectId
  saveIds   String[]
  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  comments     Comment[]
}

model Comment {
    id  String  @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    postId String @db.ObjectId
    comment String
    
    createdAt   DateTime  @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}